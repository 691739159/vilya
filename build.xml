<?xml version="1.0" standalone="yes"?>
<project name="vilya" default="compile" basedir="." xmlns:artifact="urn:maven-artifact-ant">
  <property name="deploy.dir"  value="dist"/>
  <property name="src.dir"     value="src/main/java"/>
  <property name="asrc.dir"    value="src/main/as"/>
  <property name="tsrc.dir"    value="src/test/java"/>
  <property name="classes.dir"  value="${deploy.dir}/classes"/>
  <property name="tclasses.dir" value="${deploy.dir}/test-classes"/>

  <property name="ooo-build.vers" value="2.1"/>
  <ant antfile="bootstrap.xml"/>
  <import file="${user.home}/.m2/ooo-build/${ooo-build.vers}/ooo-build.xml"/>

  <target name="-prepare" depends="-init-ooo">
    <mavendep pom="pom.xml" id="compile"/>
    <mavendep pom="etc/as-pom.xml" pathProp="aslib.path"/>
    <mavendep pom="pom.xml" id="test" scope="test"/>
    <mkdir dir="${deploy.dir}"/>
    <path id="built.classpath">
      <path refid="compile.path"/>
      <pathelement location="${classes.dir}"/>
    </path>
    <path id="test.classpath">
      <path refid="test.path"/>
      <pathelement location="${classes.dir}"/>
      <pathelement location="${tclasses.dir}"/>
    </path>
  </target>

  <target name="-preptools" depends="-prepare">
    <artifact:dependencies pathId="tools.classpath">
      <dependency groupId="com.threerings" artifactId="narya-tools" version="1.8-SNAPSHOT"/>
    </artifact:dependencies>
    <taskdef resource="com/threerings/presents/tools.properties" classpathref="tools.classpath"/>
  </target>

  <target name="clean" description="Cleans out build results">
    <delete dir="${classes.dir}"/>
    <delete dir="${tclasses.dir}"/>
    <delete dir="${deploy.dir}/docs"/>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.jar"/></delete>
    <delete failonerror="false"><fileset dir="${deploy.dir}" includes="*.swc"/></delete>
    <cleanmavendepcache pom="pom.xml"/>
    <cleanmavendepcache pom="etc/as-pom.xml"/>
    <cleanmavendepcache id="test"/>
  </target>

  <target name="distclean" description="Scorched earth clean">
    <delete dir="${deploy.dir}"/>
  </target>

  <target name="compile" depends="-prepare" description="Builds the Java code.">
    <mkdir dir="${classes.dir}"/>
    <copy todir="${classes.dir}"><fileset dir="src/main/resources" includes="**"/></copy>
    <ooojavac version="1.5" srcdir="${src.dir}" destdir="${classes.dir}"
        classpathref="compile.path"/>

    <mkdir dir="${tclasses.dir}"/>
    <ooojavac srcdir="${tsrc.dir}" destdir="${tclasses.dir}" version="1.5"
        classpathref="test.classpath"/>
  </target>

  <target name="procstream" depends="-preptools"
          description="Adds readField and writeField methods to Streamable classes">
    <!-- now instrument the associated files -->
    <instream outdir="${classes.dir}">
      <path refid="built.classpath"/>
      <fileset dir="${classes.dir}" includes="**/*.class"/>
    </instream>
  </target>

  <target name="aslib" depends="-prepare" description="Builds the ActionScript code">
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.0"/>
    <compc srcdir="${asrc.dir}" libpath="${aslib.path}"
        dest="${deploy.dir}/${ant.project.name}lib.swc"/>
  </target>

  <target name="javadoc" depends="-prepare" description="Builds the Java documentation">
    <mkdir dir="${deploy.dir}/docs"/>
    <javadoc sourcepath="${src.dir}" packagenames="com.threerings.*"
             destdir="${deploy.dir}/docs" stylesheetfile="docs/stylesheet.css"
             additionalparam="-breakiterator"
             link="http://www.threerings.net/code/vilya/docs/api">
      <classpath refid="built.classpath"/>
      <link href="http://java.sun.com/j2se/1.5/docs/api/"/>
      <link href="http://samskivert.googlecode.com/svn/apidocs"/>
      <link href="http://www.threerings.net/code/narya/docs/api"/>
    </javadoc>
    <copy todir="${deploy.dir}/docs">
      <fileset dir="${src.dir}" includes="**/*.png"/>
    </copy>
  </target>

  <target name="asdoc" unless="no_build_aslib" depends="-prepare"
          description="Builds the ActionScript documention">
    <maventaskdef groupId="com.threerings.ant" artifactId="actionscript" version="1.0"/>
    <mkdir dir="${deploy.dir}/asdocs"/>
    <asdoc srcdir="${asrc.dir}" libpath="${aslib.path}" destdir="${deploy.dir}/asdocs"/>
  </target>

  <property name="test" value=""/>
  <target name="tests" depends="compile"
          description="Runs unit tests. Use -Dtest=Foo to run only FooTest.">
    <taskdef name="unit" classpathref="test.classpath"
      classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <mkdir dir="${deploy.dir}/test-reports"/>
    <unit printsummary="off" haltonfailure="yes">
      <classpath refid="test.classpath"/>
      <sysproperty key="test_dir" value="${tclasses.dir}"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <batchtest todir="${deploy.dir}/test-reports">
        <fileset dir="${tsrc.dir}" includes="**/*${test}*Test.java"/>
      </batchtest>
    </unit>
  </target>

  <target name="dist" depends="compile,procstream,aslib" description="Builds jar files.">
    <jar destfile="${deploy.dir}/${ant.project.name}.jar" basedir="${classes.dir}"/>
    <!-- also build our various split jar files -->
    <jar destfile="${deploy.dir}/${ant.project.name}-parlor.jar">
      <fileset dir="${classes.dir}" includes="rsrc/i18n/game/**"/>
      <fileset dir="${classes.dir}" includes="com/threerings/parlor/**"/>
      <fileset dir="${classes.dir}" includes="com/threerings/ezgame/**"/>
    </jar>
    <jar destfile="${deploy.dir}/${ant.project.name}-puzzle.jar">
      <fileset dir="${classes.dir}" includes="com/threerings/puzzle/**"/>
    </jar>
    <jar destfile="${deploy.dir}/${ant.project.name}-micasa.jar">
      <fileset dir="${classes.dir}" includes="com/threerings/micasa/**"/>
      <fileset dir="${classes.dir}" includes="rsrc/**/micasa/**"/>
    </jar>
    <jar destfile="${deploy.dir}/${ant.project.name}-stage.jar">
      <fileset dir="${classes.dir}" includes="com/threerings/stage/**"/>
      <fileset dir="${classes.dir}" includes="rsrc/**/stage/**"/>
    </jar>
    <jar destfile="${deploy.dir}/${ant.project.name}-stats.jar">
      <fileset dir="${classes.dir}" includes="com/threerings/stats/**"/>
      <fileset dir="${classes.dir}" includes="rsrc/**/stats/**"/>
    </jar>
    <jar destfile="${deploy.dir}/${ant.project.name}-whirled.jar">
      <fileset dir="${classes.dir}" includes="com/threerings/whirled/**" excludes="**/*.png"/>
      <fileset dir="${classes.dir}" includes="rsrc/**/whirled/**"/>
    </jar>
  </target>

  <target name="genrecord" depends="-prepare"
          description="Generates fields for persistent record classes.">
    <taskdef name="grecord" classname="com.samskivert.depot.tools.GenRecordTask"
             classpathref="compile.path"/>
    <!-- make sure the record class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on">
      <classpath refid="built.classpath"/>
      <include name="**/*Record.java"/>
    </javac>
    <!-- now update the source files -->
    <grecord classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Record.java"/>
    </grecord>
  </target>

  <target name="gendobj" depends="-preptools"
          description="Generates additional methods for distributed object classes">
    <!-- make sure the dobject class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5" classpathref="built.classpath">
      <include name="**/*Object.java"/>
    </javac>
    <!-- now generate the associated files -->
    <gendobj classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Object.java"/>
    </gendobj>
  </target>

  <target name="genservice" depends="-preptools"
          description="Generates marshaller and dispatcher classes for all invocation services">
    <!-- make sure the service class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="built.classpath"/>
      <include name="**/*Service.java"/>
      <exclude name="**/InvocationService.java"/>
    </javac>
    <!-- generate our services that have no ActionScript counterpart -->
    <genservice header="lib/SOURCE_HEADER" classpathref="built.classpath">
      <fileset dir="${src.dir}">
        <include name="**/puzzle/client/*Service.java"/>
        <include name="**/micasa/simulator/client/*Service.java"/>
        <include name="**/micasa/lobby/*Service.java"/>
        <include name="**/parlor/tourney/client/*Service.java"/>
      </fileset>
      <providerless service="SimulatorService"/>
    </genservice>
    <!-- generate our services that have an ActionScript counterpart -->
    <genservice header="lib/SOURCE_HEADER" asroot="${asrc.dir}" classpathref="built.classpath">
      <fileset dir="${src.dir}">
        <include name="**/client/*Service.java"/>
        <exclude name="**/puzzle/client/*Service.java"/>
        <exclude name="**/micasa/simulator/client/*Service.java"/>
        <exclude name="**/parlor/tourney/client/*Service.java"/>
      </fileset>
    </genservice>
  </target>

  <target name="genreceiver" depends="-preptools"
          description="Generates sender and decoder classes for all invocation receivers">
    <!-- make sure the receiver class files are all compiled -->
    <javac srcdir="${src.dir}" destdir="${classes.dir}" includeAntRuntime="false"
           debug="on" optimize="${build.optimize}" deprecation="on"
           source="1.5" target="1.5">
      <classpath refid="built.classpath"/>
      <include name="**/*Receiver.java"/>
      <exclude name="**/InvocationReceiver.java"/>
    </javac>
    <!-- now generate the associated files -->
    <genreceiver header="lib/SOURCE_HEADER" classpathref="built.classpath">
      <fileset dir="${src.dir}" includes="**/*Receiver.java"
        excludes="**/InvocationReceiver.java"/>
    </genreceiver>
  </target>

  <target name="genascript" depends="-preptools"
          description="Generates ActionScript versions of our Streamable classes">
    <!-- now generate the associated files -->
    <genascript header="lib/SOURCE_HEADER" asroot="${asrc.dir}">
      <fileset dir="${src.dir}">
        <include name="**/parlor/data/*.java"/>
        <include name="**/parlor/**/data/*.java"/>
        <exclude name="**/parlor/game/data/GameConfig.java"/> <!-- fiddly bits -->
        <exclude name="**/parlor/tourney/**"/>
        <include name="**/ezgame/data/*.java"/>
        <include name="**/whirled/data/*.java"/>
        <include name="**/whirled/**/data/*.java"/>
        <exclude name="**/whirled/spot/data/Cluster.java"/> <!-- fiddly bits -->
        <include name="**/stage/data/*.java"/>
      </fileset>
    </genascript>
  </target>

  <property name="maven.deploy.repo" value="file://${user.home}/.m2/repository"/>
  <target name="maven-deploy" depends="dist,tests" 
          description="Deploys our build artifacts to a Maven repository.">
    <jar basedir="${src.dir}" destfile="${deploy.dir}/${ant.project.name}-sources.jar"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}.jar" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="pom"/>
      <attach file="${deploy.dir}/${ant.project.name}-sources.jar" classifier="sources"/>
    </artifact:deploy>
    <artifact:pom id="as-pom" file="etc/as-pom.xml"/>
    <artifact:deploy file="${deploy.dir}/${ant.project.name}lib.swc" uniqueVersion="false">
      <remoteRepository url="${maven.deploy.repo}"/>
      <pom refid="as-pom"/>
    </artifact:deploy>
  </target>
</project>
